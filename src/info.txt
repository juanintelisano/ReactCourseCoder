PROPS = son las propiedades que le pasas a un componente. Puede ser cualquier cosa
Ej: document.AddEvebtListener (parametro). No hay limite.
La ejecucion de la  funcion va a ser del tipo:
    <Foo parametro="1"/>

    -Si el parametro que le paso es un string, se pasa como en html
    -si es cualquer otra cosa, no van las comilasy van llaves ej <Nav inheader = {true} />

    1:19 paso + componentes
    EJ:     <Nav inHeader ="bienvenido" edad={31} usuraios={["juan", "horacio", "carlos"]} persona={{nombre: "juan"}}/> 



    ---------------------------------------------------
    Class vs. Funcionales:
    Hook que necesitamos: useState. Siempre da un ARRAY!
    EJ:
    1- Pimero va la funcion  (const resultado = useState(0))
    2- Despues el estado (const contador = resultado [0])
    3- y despues la funcion con la que queres cambiar el estado   (const canbiarContador = resultado [1])

La unica manera de cambiar el estado es con la funcion principal por ej: cambiarContador (contador + 1) -aumenta e manera incremental de a uno-

LAS FUNCIONES QUE CAMBIAN SIEMPRE ARRANCAN CON SET..
  

PRIMERO:
poner evento (por ejemplo click) al boton: <button onClick = { **}> aumentar</button>

SEGUNDO:
Creo una función para contar y la pongo adentro del OnClick( ** )

TERCERO:
Dentro de la funcion anterior, creo función SETXXXX para aumentaR

Stock, tiene que ser un item de tipo numerico ej. stock {5}
Initial: es el valor inicial del estado  
<> Ejemplo de props del ejercicio:
const initial =1 ------> useState(initial)
onAdd es funcion. Tiene q valer una funcion. Puede ser vacia tipo: <main onADD = {() => {}} />


-------------------------------------------------------
useEffect: permite renderizar los componentes. Se ejecuta la función, termina en el retorno y podemos verlo en pantalla.

Ciclo de vida:
const Usuarios = () => {
    const cargando = useState(true)

(5) useEffect(() => 
    // ya consegui los usuarios!
)

    if (cargando){
        return (
            <ul>
            cargando...
            </ul>
        )
    } else {
        return(
            usuarios...
        )
    }
}

1er ciclo de vida:
1- carga usuarios
2- carga el estado por primera vez
3- se evalua la primera condicional
4- se muestra cargando... (renderizado)
5- se activa el efecto
6- modifico el estado adentro el efecto para que arranque el segundo ciclo de vida

2do ciclo de vida:
1- carga usuarios
2- se cambia el valor a false del estado
3- se evalua por primera vez el condicional de nuevo, ahora el estado es false
4- 


useEffect(a,b) -> el parametro a va siempre y el b es opcional (funcion, [array])
   //veo cada hola por cada ciclo de vida
  IMPLEMENTAR UN PATRON CONTAINER PARA EL useEffect
  Container -> preentacional
  presentacional presenta. puede tener alguna logica pero mas que eso no
  CONTAINER, BUSCA obtener los componentes del presentacional. Hay estados, logicas, y efectos. Todo lo de container se pasa por props al presentacional. Y ese la usa para hacer efectos. Puede haber mas componentes en el medio:
    CONTAINER -> PRESENTACIONAL 1 - > PRESENTACIONAL 2
    C -> catalogo de la app
    p1 ->  ara pasarle el array del producto por props. este va mapeando. por cada vuelta que de miestra un p2 (reparte las cartas)
    p2 -> cada tarjeta de los productos


    setTimeout (funcion, numeros)
    numeros = segundos que quiero esperar para ejecutar la fx

    

-------------------------------------------------------------------------
Que hace el fetch? hace una peticion. trae datos de algu lado. le das una direccion(url/ip).
Protocolos de comunicación
HTTP/S:
TCP/IP:
FTP:
POP/IMAO/SMTP:
SSH:


--Requisito(cliente)
URL/IP - METODO(get-post-delete-put) - VERSION - HEADERS - BODY
Para que fetch funcione solamente hay q pasarle una url

content-type: application/json
content-length
body: nombres

-->

--Response(servidor)
te manda su: version- codigo- mensaje
headers - body 

CODIGOS: 2XX=OK (EL 200 ES EL MEJOR); 4XX=ERRPR; 1xx=INFORMACION; 3XX=REDIRECCIONES, 5XX=ERRORES DEL servidor


ej:
fetch ("http://wwww...........")
.then((respuesta) =>{
    console.log('termino el pedido')
})
.cartch((error) => {
    console.log("hubo un error")
})
DEVUELVE:
>> Promise { pending }
Termino el pedido
 (then si termino bien, y catch si termino mal)
error puede ser que hayas puesto url mal o se haya cotado internet. si el servidor te puede responder de cualqueir forma entonces sse va a implementar un fetch.



1- hago el pedido con Fetch: Como va atardar me da una promesa, pror eso el . then.catch
Fetch ("https://www..........")

.then((respuesta) =>{

    2- obtenemos y validamos la rta del servidor
    	//respuesta.json()/arrayBuffer(/text(/blob()))

    3- transformo la rta en formato que yo queria
    console.log("termino el pedido)
    console.log("respuesta.json())

    4-
    const p = respuesta.json()
    return p
    })

.then((productos) => {
    console.log(productos)
})
.catch((error) =>{
    console.log('hubo un errro")
})





Stack: el lugar donde se ejecutan las funciones de js. Se ejecuta una por tiempo. El fetch, en el momento que sabe que la funcion va a tardar, las manda a ejecutarse a otro lugar (pending) asi se te libera el stack

-----------------
Routes..
Librería: ract.

CADA VEZ QUE HACEMOS CLICK EN ALGUN LUGAR DE LA PAGINA Y CAMBIA ALGO, SE VUELVE A EJECUTAR UNA Route
path => "a que url tiene que coincidir la ruta"


<NavLink to="/category/base">{inHeader?"base": "base"}</NavLink>
                    <NavLink to="/category/medium">{inHeader?"medium": "medium"}</NavLink>
                    <NavLink to="/category/premium">{inHeader?"premium": "premium"}</NavLink>